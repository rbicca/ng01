
Anota��es Angular - 17

	Verificar vers�o: ng v
	
	Criar app
		ng new app-name --no-strict --standalone false --routing false
		
		Para executar (dentro do docker trocar host e desabilitar host check)
		ng serve --host 0.0.0.0 --disable-host-check --poll 2000
		
		sudo kill `sudo lsof -t -i:4200`
		npx kill-port 4200
		
		ps     lista os processos para obter id
		kill -9 (id)
		
		npm install --legacy-peer-deps
		
	----------------------------------------------
	
	Add bootstrap
		npm i --save bootstrap@3
		em angular.json, architect/build/styles, adicionar no array:
		"node_modules/bootstrap/dist/css/bootstrap.min.css"
		
    Ciclo de inicio

		- index.html tem o componente raiz app-root
		- Roda main.ts, dizendo que o bootstrap module é AppModule
		- AppModule é um NgModule, que tem como bootstrap component AppComponent
		- AppComponent se identifica como app-root
		- Ali é renderizado o AppComponent

	Componente Basico
		import { Component } from "@angular/core";

		@Component({
			selector: 'app-server',
			templateUrl: './server.component.html'
			encapsulation:  ** mudar comportamento do view encapsulation
			                emulated, none or shadowDOM
		})
		export class ServerComponent{

		}
	E para usar o componente...
		Tem que enfiar o component no modulo (AppModule)
		na seção declarations 

	Criar componente usando cli
	ng g c <componente> --skip-tests


	Propriedades básicas do @Component
		- selector
		- template ou templateUrl
		- styles[] ou styleUrls[]

	Sobre o selector:
		selector: app-server       usa <app-server> </app-server>
		selector: [app-server]     usa <div app-server> </div>
		selector: .app-server      usa <div class="app-server"> </div>
		
	Bindings
		{{}}
			<p>The Server ID {{serverId}} is {{getServerStatus()}}</p>
		[]
			<button class="btn" [disabled]="!allowNewServer">Novo Servidor</button>
		()
			<button class="btn" [(click)="onCreateServer()" >Novo Servidor</button>
			<input type="text" class="form-control" (input)="onUpdateServerName($event)">
		[()]
			ngModel tem que importar FormsModule de @angular/forms
			<input type="text" class="form-control" [(ngModel)]="serverName">

	Diretivas
		- Podem ser customizadas: @Directive
        - Existentes no angular
			<p *ngIf="serverCreated">Servidor {{serverName}} criado.</p>

		** Angular 17
		@if (someCondition) {
 		 <p>Only visible if 'someCondition' is true</p>
		}

		<p
    		[ngStyle]="{backgroundColor : getColor()}"
    		[ngClass]="{online : serverStatus === 'online'}"
    	>The Server ID {{serverId}} is {{getServerStatus()}}</p>


		*ngFor ==> bah ... dentro do componente ... q estranho .. virei reactizero
		<app-server *ngFor="let s of servers; let i = index"></app-server>

		** Angular 17
	   	@for(i of items; track i.id){
			<li>{{i.title}}</li>
		}
	----------------------------------------------

	Propriedades
		@Input() prop;
		<xxx  [prop]="valor" >
		@Input('nomeExterno') xxx;

	Eventos
		1. Criar o evento 
		   serverCreated = new EventEmitter<{serverName: string, serverContent: string}>();

		2. Disparar o evento
			this.serverCreated.emit({
      			serverName: this.newServerName,
      			serverContent: this.newServerContent
    		});
		3. Tornar o evento escutável
		   @Output() serverCreated = new EventEmitter<{serverName: string, serverContent: string}>();	

		4. Escutar o evento a partir de um component pai
		   <app-cockpit (serverCreated)="onServerAdded($event)" />
	----------------------------------------------

	LocalReference
	  Permite passar referencia do componente inteiro ao TS
	  Só serve para passar como parametro para o TS. Não permite referenciar direto

	  <input type="text" #nomeInput />
	  no TS pegar em algum parametro, nomeInput.value
	
	@ViewChild -- aponta para o componente inteiro
	Serve para referenciar direto

	<input type="text" class="form-control" #serverContentInput>
	@ViewChild('serverContentInput', { static: true }) serverContentInput: ElementRef;
	this.serverContentInput.nativeElement.value

	@ContentChild(ref, ...)
	Serve para acessar referencia de componente projetado dentro do <ng-content>

	----------------------------------------------
	<ng-content>   --> Semelhante ao props.children do React
	----------------------------------------------

	Ciclo de vida
		constructor()
		ngOnChanges (changes: SimpleChanges)
		ngOnInit
		ngDocCheck
		ngAfterContentInit
		ngAfterContentChecked
		ngAfterViewInit
		ngAfterViewChecked
		ngOnDestroy
	----------------------------------------------

	Diretivas persoanlizadas -- podemos criar nossos proprios atributos
		@Directive({ selector: '[appStabylo] })
		export class StabyloDirective  implements OnInit {

  			constructor(private elRef: ElementRef,  private renderer: Renderer2) { }

  			ngOnInit(): void {
    			this.renderer.setStyle(this.elRef.nativeElement, 'background-color', 'aqua');
  			}
		}

		Neste caso injetamos um ElementRef para apontar para o componente que está utilizando
		e injetamos Renderer2 para interagir com ele e modificar estilo, de acordo com
		o engine do angular.

		//Conseguimos receber eventos do componente host referenciado
		@HostListener('mouseenter') mouseover(e: Event){ }

		@HostBinding(propriedade) - liga uma propriedade nossa à propriedade do objeto host
		@HostBinding('style.backgroundColor') corDeFundo: string;

		Podemos passar propriedades (Inputs()) normlamente para as nossas Diretivas

		Existe também:
			<div [ngSwitch]="variavel">
				<p *ngSwitchCase="5">Variavel é 5</p>
				<p *ngSwitchCase="10">Variavel é 10</p>
				<p *ngSwitchDefault">Padrao 100</p>
			</div>

	----------------------------------------------

	Services
		- Classe simple, com funções para ser usada via Injeção de Dependencia (DI)
		- Injetamos dependencia via constructor. Atalhozinho maroto facilita para não criar prop
		  constructor(private loggingService: LoggingService){}
		- Tem que informar o tipo em providers:[] do @Component
		  CUIDADO: colocar somente no provider do PAI, que vai dividir a instancia com os filhos
		  provider[] do Modulo é o nivel mais alto.

		Outra alternativa --> função inject do angular
		1. Declarar prop     private loggingService?: LoggingService
		2. injetar --> this.loggingService = inject(LoggingService)

		Para poder injetar serviço dentro de serviço temos que usar @Injectable() na classe.
	----------------------------------------------

	Rotas
		1. Configuramos objetos de @angular/router
		const appRoutes: Routes = [
  			{ path: '', component: HomeComponent },
  			{ path: 'users', component: UsersComponent },
  			{ path: 'servers', component: ServersComponent },
		];
		2. Registramos a rota importando RouterModule no NgModule
			RouterModule.forRoot(appRoutes)
		
		3. Exibir o componente da rota em um <router-outlet>

		4. Navegar via link ==> usar atributo routerLink=""
		   class
		   routerLinkActive="css class active"
		   para evitar "Sub caminho" contido na rota
		   [routerLinkActiveOptions]="{ exact: true }

		4.1 [queryParams] permite passar parametros (?) na url
		    [queryParams] = "{allowEdit : '1'}"
			fragment="loading"  --> poe o hashtag

		5. Navegar programaticamente => 
		   Injeta-se o router
		   constructor(private router: Router){}  private route: ActivatedRoute 
		   Navega-se
		   this.router.navigate(['/servers']);

		5.1 query params e fragments programaticamente:
		    this.router.navigate(['/servers',id,'edit'], { queryParams: { allowEdit : '1' }, fragment: 'loading' });

		6. Router params
		   { path: 'users/:id', component: UsersComponent },
		   
		   Injeta-se ActivatedRoute  (no ngOnInit por exemplo)
		   id = this.route.snapshot.params['id']

			Porém, se os valores dos parametros mudam, e a ROTA NAO, nao atualiza automaticamente.
			Tem que assinar o observable
			    this.route.params.subscribe((e: Params)=>{
        			this.user.id = e['id'];
        			this.user.name = e['name'];
    			});

			Para pegar queryParams e fragment
		    console.log(this.route.snapshot.queryParams);
    		console.log(this.route.snapshot.fragment);
								ou
					usar como observable
		
			Podemos passar objeto data na rota para passar parametros se necessário
			 { path: 'not-found', component: ErrorPageComponent, data: { message: 'Page not found!' }},

		7. Nested Routes     -- Não esquecer de colocar um outlet para receber
			const appRoutes: Routes = [
				{ path: '', component: HomeComponent },
				{ path: 'users', component: UsersComponent, children: [
					{ path: ':id/:name', component: UserComponent },
				]},
				{ path: 'servers', component: ServersComponent, children:[
					{ path: ':id', component: ServerComponent },
					{ path: ':id/edit', component: EditServerComponent }
				]},
			];

		Exemplo imendando uma rota em cima da rota atual
		onEdit(){
    		this.router.navigate(['edit'],{ relativeTo: this.route } );
  		}
		* Importante: para preservar a query string adicionar queryParamsHandling: 'preserve'
		  no objeto de extras do navigate

		8. Redirecionamento -- cuidando para deixar no fim
		   { path: '**', redirectTo: '/not-found'},
		   Cuidado também com o comportamento padrão: match por prefixo. - como mudar?
		   { path: '', redirectTo: '/somewhere-else', pathMatch: 'full' }

		9. Guardas  => código antes da rota ou depois da saida dela
		 	Trata-se de uma classe que deve implementar canActivate e/ou canActivateChild
			É nesses métodos que verificamos a autenticação, validamos e redirecionamos se for o caso.
			Depos colocar na rota    canActivateChild: [AuthGuard],  ou child
			Não esquecer de prover os serviços no módulo

			ao contrário, podemos checar a saída do componente com CanDeactivate

		10. Resolver
			Podemos carregar dados antes mesmo da rota implmentando um Resolver
			{ path: ':id', component: ServerComponent , resolve: { server: ServerResolver }}
			Ai, no ngOnInit, dá para pegar os dados já carregados em this.route.data.subscribe()
		
		** Importante **
		No deploy, o webserver tem que estar configurado para, no caso de 404, retornar index.html
		ou use { useHash : true } no  RouterModule.forRoot()
