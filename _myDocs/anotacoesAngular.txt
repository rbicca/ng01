
Anota��es Angular - 17

	Verificar vers�o: ng v
	
	Criar app
		ng new app-name --no-strict --standalone false --routing false
		
		Para executar (dentro do docker trocar host e desabilitar host check)
		ng serve --host 0.0.0.0 --disable-host-check --poll 2000
		
		sudo kill `sudo lsof -t -i:4200`
		npx kill-port 4200
		
		ps     lista os processos para obter id
		kill -9 (id)
		
		npm install --legacy-peer-deps
		
	----------------------------------------------
	
	Add bootstrap
		npm i --save bootstrap@3
		em angular.json, architect/build/styles, adicionar no array:
		
    Ciclo de inicio

		- index.html tem o componente raiz app-root
		- Roda main.ts, dizendo que o bootstrap module é AppModule
		- AppModule é um NgModule, que tem como bootstrap component AppComponent
		- AppComponent se identifica como app-root
		- Ali é renderizado o AppComponent

	Componente Basico
		import { Component } from "@angular/core";

		@Component({
			selector: 'app-server',
			templateUrl: './server.component.html'
			encapsulation:  ** mudar comportamento do view encapsulation
			                emulated, none or shadowDOM
		})
		export class ServerComponent{

		}
	E para usar o componente...
		Tem que enfiar o component no modulo (AppModule)
		na seção declarations 

	Criar componente usando cli
	ng g c <componente> --skip-tests


	Propriedades básicas do @Component
		- selector
		- template ou templateUrl
		- styles[] ou styleUrls[]

	Sobre o selector:
		selector: app-server       usa <app-server> </app-server>
		selector: [app-server]     usa <div app-server> </div>
		selector: .app-server      usa <div class="app-server"> </div>
		
	Bindings
		{{}}
			<p>The Server ID {{serverId}} is {{getServerStatus()}}</p>
		[]
			<button class="btn" [disabled]="!allowNewServer">Novo Servidor</button>
		()
			<button class="btn" [(click)="onCreateServer()" >Novo Servidor</button>
			<input type="text" class="form-control" (input)="onUpdateServerName($event)">
		[()]
			ngModel tem que importar FormsModule de @angular/forms
			<input type="text" class="form-control" [(ngModel)]="serverName">

	Diretivas
		- Podem ser customizadas: @Directive
        - Existentes no angular
			<p *ngIf="serverCreated">Servidor {{serverName}} criado.</p>

		** Angular 17
		@if (someCondition) {
 		 <p>Only visible if 'someCondition' is true</p>
		}

		<p
    		[ngStyle]="{backgroundColor : getColor()}"
    		[ngClass]="{online : serverStatus === 'online'}"
    	>The Server ID {{serverId}} is {{getServerStatus()}}</p>


		*ngFor ==> bah ... dentro do componente ... q estranho .. virei reactizero
		<app-server *ngFor="let s of servers; let i = index"></app-server>

		** Angular 17
	   	@for(i of items; track i.id){
			<li>{{i.title}}</li>
		}
	----------------------------------------------

	Propriedades
		@Input() prop;
		<xxx  [prop]="valor" >
		@Input('nomeExterno') xxx;

	Eventos
		1. Criar o evento 
		   serverCreated = new EventEmitter<{serverName: string, serverContent: string}>();

		2. Disparar o evento
			this.serverCreated.emit({
      			serverName: this.newServerName,
      			serverContent: this.newServerContent
    		});
		3. Tornar o evento escutável
		   @Output() serverCreated = new EventEmitter<{serverName: string, serverContent: string}>();	

		4. Escutar o evento a partir de um component pai
		   <app-cockpit (serverCreated)="onServerAdded($event)" />

	----------------------------------------------

	LocalReference
	  Permite passar referencia do componente inteiro ao TS
	  Só serve para passar como parametro para o TS. Não permite referenciar direto

	  <input type="text" #nomeInput />
	  no TS pegar em algum parametro, nomeInput.value
	
	@ViewChild -- aponta para o componente inteiro
	Serve para referenciar direto

	<input type="text" class="form-control" #serverContentInput>
	@ViewChild('serverContentInput', { static: true }) serverContentInput: ElementRef;
	this.serverContentInput.nativeElement.value

	@ContentChild(ref, ...)
	Serve para acessar referencia de componente projetado dentro do <ng-content>
	
	----------------------------------------------
	<ng-content>   --> Semelhante ao props.children do React
	----------------------------------------------

	Ciclo de vida
		constructor()
		ngOnChanges (changes: SimpleChanges)
		ngOnInit
		ngDocCheck
		ngAfterContentInit
		ngAfterContentChecked
		ngAfterViewInit
		ngAfterViewChecked
		ngOnDestroy
